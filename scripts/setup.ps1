# n8n Docker Setup Script (PowerShell)
# Initial configuration for new users

param(
    [switch]$Force,
    [switch]$SkipDockerPull
)

$ErrorActionPreference = "Stop"
$Host.UI.RawUI.WindowTitle = "n8n Docker Setup - Initial Configuration"

# Colors for output
$Green = "Green"
$Yellow = "Yellow"
$Red = "Red"
$Cyan = "Cyan"

function Write-Status {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Color
}

function Write-Success {
    param([string]$Message)
    Write-Host "✓ $Message" -ForegroundColor $Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "⚠ $Message" -ForegroundColor $Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "✗ $Message" -ForegroundColor $Red
}

# Change to script directory
$ScriptPath = Split-Path -Parent $MyInvocation.MyCommand.Path
Set-Location $ScriptPath
Set-Location ..

Write-Status "========================================" $Cyan
Write-Status "   n8n Docker Setup - Initial Setup" $Cyan
Write-Status "========================================" $Cyan
Write-Host ""

# Check if this is a fresh clone
if (Test-Path ".env" -and -not $Force) {
    Write-Warning ".env file already exists!"
    Write-Status "This appears to be an already configured installation."
    Write-Host ""
    $Continue = Read-Host "Do you want to continue with setup anyway? (y/N)"
    if ($Continue -ne "y" -and $Continue -ne "Y") {
        Write-Status "Setup cancelled."
        Read-Host "Press Enter to exit"
        exit 0
    }
    Write-Host ""
}

Write-Status "Checking prerequisites..." $Cyan
Write-Host ""

# Check Docker Desktop
Write-Status "[1/6] Checking Docker Desktop..." $Cyan
try {
    $DockerInfo = docker info 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Docker Desktop is running"
    } else {
        throw "Docker not responding"
    }
} catch {
    Write-Error "Docker Desktop is not running or not installed."
    Write-Status "Please install Docker Desktop for Windows and start it."
    Write-Status "Download: https://www.docker.com/products/docker-desktop"
    Write-Host ""
    Read-Host "Press Enter to exit"
    exit 1
}

# Check Node.js
Write-Status "[2/6] Checking Node.js..." $Cyan
try {
    $NodeVersion = node --version 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Node.js is installed ($NodeVersion)"
    } else {
        throw "Node.js not found"
    }
} catch {
    Write-Error "Node.js is not installed."
    Write-Status "Please install Node.js from https://nodejs.org/"
    Write-Host ""
    Read-Host "Press Enter to exit"
    exit 1
}

# Check npm
try {
    $NpmVersion = npm --version 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Success "npm is available ($NpmVersion)"
    } else {
        throw "npm not found"
    }
} catch {
    Write-Error "npm is not available."
    Write-Status "Please ensure npm is properly installed with Node.js."
    Write-Host ""
    Read-Host "Press Enter to exit"
    exit 1
}

Write-Host ""
Write-Status "Installing dependencies..." $Cyan
Write-Host ""

# Install Electron wrapper dependencies
Write-Status "[3/6] Installing Electron wrapper dependencies..." $Cyan
if (Test-Path "n8n-electron-wrapper") {
    Set-Location "n8n-electron-wrapper"
    if (-not (Test-Path "node_modules")) {
        Write-Status "Installing npm dependencies..."
        npm install
        if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to install npm dependencies."
            Write-Host ""
            Read-Host "Press Enter to exit"
            exit 1
        }
        Write-Success "npm dependencies installed"
    } else {
        Write-Success "node_modules already exists"
    }
    Set-Location ..
} else {
    Write-Warning "n8n-electron-wrapper directory not found"
}

# Create .env file if it doesn't exist
Write-Status "[4/6] Setting up environment configuration..." $Cyan
if (-not (Test-Path ".env")) {
    if (Test-Path ".env.example") {
        Write-Status "Copying .env.example to .env..."
        Copy-Item ".env.example" ".env"
        Write-Success ".env file created from template"
    } else {
        Write-Status "Creating basic .env file..."
        @"
# n8n Environment Configuration
# Generated by setup script

# Basic Authentication
N8N_BASIC_AUTH_USER=admin
N8N_BASIC_AUTH_PASSWORD=password

# Server Configuration
N8N_HOST=localhost
N8N_PORT=5678

# Optional: Lock n8n version
# N8N_VERSION=

# Timezone
TZ=UTC
"@ | Out-File -FilePath ".env" -Encoding UTF8
        Write-Success "Basic .env file created"
        Write-Host ""
        Write-Warning "IMPORTANT: Please edit .env file to set secure credentials!"
        Write-Status "Default credentials are admin/password - change these immediately."
    }
} else {
    Write-Success ".env file already exists"
}

# Create desktop shortcuts
Write-Status "[5/6] Creating desktop shortcuts..." $Cyan
Write-Host ""

# Get desktop path
$DesktopPath = [Environment]::GetFolderPath("Desktop")

# Create shortcuts directory if it doesn't exist
if (-not (Test-Path "shortcuts")) {
    New-Item -ItemType Directory -Path "shortcuts" | Out-Null
}

# Create shortcuts using PowerShell
$WshShell = New-Object -ComObject WScript.Shell

# Silent startup shortcut
Write-Status "Creating 'n8n up (silent)' shortcut..."
$Shortcut = $WshShell.CreateShortcut("$PWD\shortcuts\n8n up (silent).lnk")
$Shortcut.TargetPath = "$PWD\scripts\run_silent.bat"
$Shortcut.WorkingDirectory = $PWD
$Shortcut.IconLocation = "$PWD\icons\n8n.ico"
$Shortcut.Description = "Start n8n silently"
$Shortcut.Save()

# Verbose startup shortcut
Write-Status "Creating 'n8n up (verbose)' shortcut..."
$Shortcut = $WshShell.CreateShortcut("$PWD\shortcuts\n8n up (verbose).lnk")
$Shortcut.TargetPath = "$PWD\scripts\run_verbose.bat"
$Shortcut.WorkingDirectory = $PWD
$Shortcut.IconLocation = "$PWD\icons\n8n.ico"
$Shortcut.Description = "Start n8n with logs"
$Shortcut.Save()

# Shutdown shortcut
Write-Status "Creating 'n8n down' shortcut..."
$Shortcut = $WshShell.CreateShortcut("$PWD\shortcuts\n8n down.lnk")
$Shortcut.TargetPath = "$PWD\scripts\down.bat"
$Shortcut.WorkingDirectory = $PWD
$Shortcut.IconLocation = "$PWD\icons\n8n.ico"
$Shortcut.Description = "Stop n8n"
$Shortcut.Save()

Write-Success "Desktop shortcuts created in shortcuts/ folder"

# Pull latest n8n Docker image
if (-not $SkipDockerPull) {
    Write-Status "[6/6] Pulling latest n8n Docker image..." $Cyan
    Write-Host ""
    Write-Status "This may take a few minutes depending on your internet connection..."
    docker pull n8nio/n8n:latest
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Latest n8n Docker image pulled"
    } else {
        Write-Warning "Failed to pull latest n8n image."
        Write-Status "You can try again later or use the image that's already available."
    }
} else {
    Write-Status "[6/6] Skipping Docker image pull (--SkipDockerPull specified)" $Yellow
}

Write-Host ""
Write-Status "========================================" $Cyan
Write-Status "           Setup Complete!" $Cyan
Write-Status "========================================" $Cyan
Write-Host ""
Write-Status "What's been configured:" $Green
Write-Success "Docker Desktop verified"
Write-Success "Node.js and npm verified"
Write-Success "Electron wrapper dependencies installed"
Write-Success "Environment configuration created"
Write-Success "Desktop shortcuts created"
if (-not $SkipDockerPull) {
    Write-Success "Latest n8n Docker image pulled"
}
Write-Host ""
Write-Status "Next steps:" $Cyan
Write-Status "1. Edit .env file to set secure credentials"
Write-Status "2. Copy shortcuts from shortcuts/ to your desktop"
Write-Status "3. Run 'scripts\run_silent.bat' or use desktop shortcuts"
Write-Host ""
Write-Status "For help, see README.md"
Write-Host ""
Read-Host "Press Enter to exit" 